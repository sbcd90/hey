// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: tensorflow_serving/apis/regression.proto

package tensorflow_serving

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Regression result for a single item (tensorflow.Example).
type Regression struct {
	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *Regression) Reset()                    { *m = Regression{} }
func (m *Regression) String() string            { return proto.CompactTextString(m) }
func (*Regression) ProtoMessage()               {}
func (*Regression) Descriptor() ([]byte, []int) { return fileDescriptorRegression, []int{0} }

func (m *Regression) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

// Contains one result per input example, in the same order as the input in
// RegressionRequest.
type RegressionResult struct {
	Regressions []*Regression `protobuf:"bytes,1,rep,name=regressions" json:"regressions,omitempty"`
}

func (m *RegressionResult) Reset()                    { *m = RegressionResult{} }
func (m *RegressionResult) String() string            { return proto.CompactTextString(m) }
func (*RegressionResult) ProtoMessage()               {}
func (*RegressionResult) Descriptor() ([]byte, []int) { return fileDescriptorRegression, []int{1} }

func (m *RegressionResult) GetRegressions() []*Regression {
	if m != nil {
		return m.Regressions
	}
	return nil
}

type RegressionRequest struct {
	// Model Specification.
	ModelSpec *ModelSpec `protobuf:"bytes,1,opt,name=model_spec,json=modelSpec" json:"model_spec,omitempty"`
	// Input data.
	Input *Input `protobuf:"bytes,2,opt,name=input" json:"input,omitempty"`
}

func (m *RegressionRequest) Reset()                    { *m = RegressionRequest{} }
func (m *RegressionRequest) String() string            { return proto.CompactTextString(m) }
func (*RegressionRequest) ProtoMessage()               {}
func (*RegressionRequest) Descriptor() ([]byte, []int) { return fileDescriptorRegression, []int{2} }

func (m *RegressionRequest) GetModelSpec() *ModelSpec {
	if m != nil {
		return m.ModelSpec
	}
	return nil
}

func (m *RegressionRequest) GetInput() *Input {
	if m != nil {
		return m.Input
	}
	return nil
}

type RegressionResponse struct {
	Result *RegressionResult `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
}

func (m *RegressionResponse) Reset()                    { *m = RegressionResponse{} }
func (m *RegressionResponse) String() string            { return proto.CompactTextString(m) }
func (*RegressionResponse) ProtoMessage()               {}
func (*RegressionResponse) Descriptor() ([]byte, []int) { return fileDescriptorRegression, []int{3} }

func (m *RegressionResponse) GetResult() *RegressionResult {
	if m != nil {
		return m.Result
	}
	return nil
}

func init() {
	proto.RegisterType((*Regression)(nil), "tensorflow.serving.Regression")
	proto.RegisterType((*RegressionResult)(nil), "tensorflow.serving.RegressionResult")
	proto.RegisterType((*RegressionRequest)(nil), "tensorflow.serving.RegressionRequest")
	proto.RegisterType((*RegressionResponse)(nil), "tensorflow.serving.RegressionResponse")
}
func (m *Regression) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Regression) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		dAtA[i] = 0xd
		i++
		binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i += 4
	}
	return i, nil
}

func (m *RegressionResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressionResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Regressions) > 0 {
		for _, msg := range m.Regressions {
			dAtA[i] = 0xa
			i++
			i = encodeVarintRegression(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *RegressionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressionRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ModelSpec != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegression(dAtA, i, uint64(m.ModelSpec.Size()))
		n1, err := m.ModelSpec.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.Input != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRegression(dAtA, i, uint64(m.Input.Size()))
		n2, err := m.Input.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *RegressionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegressionResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintRegression(dAtA, i, uint64(m.Result.Size()))
		n3, err := m.Result.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintRegression(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Regression) Size() (n int) {
	var l int
	_ = l
	if m.Value != 0 {
		n += 5
	}
	return n
}

func (m *RegressionResult) Size() (n int) {
	var l int
	_ = l
	if len(m.Regressions) > 0 {
		for _, e := range m.Regressions {
			l = e.Size()
			n += 1 + l + sovRegression(uint64(l))
		}
	}
	return n
}

func (m *RegressionRequest) Size() (n int) {
	var l int
	_ = l
	if m.ModelSpec != nil {
		l = m.ModelSpec.Size()
		n += 1 + l + sovRegression(uint64(l))
	}
	if m.Input != nil {
		l = m.Input.Size()
		n += 1 + l + sovRegression(uint64(l))
	}
	return n
}

func (m *RegressionResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.Size()
		n += 1 + l + sovRegression(uint64(l))
	}
	return n
}

func sovRegression(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRegression(x uint64) (n int) {
	return sovRegression(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Regression) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Regression: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Regression: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipRegression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressionResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressionResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressionResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Regressions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Regressions = append(m.Regressions, &Regression{})
			if err := m.Regressions[len(m.Regressions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelSpec", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModelSpec == nil {
				m.ModelSpec = &ModelSpec{}
			}
			if err := m.ModelSpec.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Input", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Input == nil {
				m.Input = &Input{}
			}
			if err := m.Input.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegressionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRegression
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegressionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegressionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRegression
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &RegressionResult{}
			}
			if err := m.Result.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRegression(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRegression
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRegression(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRegression
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRegression
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRegression
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRegression
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRegression(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRegression = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRegression   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("tensorflow_serving/apis/regression.proto", fileDescriptorRegression) }

var fileDescriptorRegression = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x75, 0x45, 0xad, 0xc4, 0x65, 0x00, 0x2c, 0x86, 0x80, 0x44, 0x54, 0x19, 0x86, 0x4c,
	0x89, 0x54, 0xd6, 0x0e, 0x88, 0x8d, 0x81, 0xc5, 0xb0, 0x57, 0xa5, 0x1c, 0x55, 0xa4, 0xd4, 0x36,
	0x3e, 0xa7, 0xec, 0x3c, 0x1d, 0x23, 0x8f, 0x80, 0xf2, 0x14, 0x8c, 0xa8, 0x4e, 0x20, 0x41, 0xb4,
	0x62, 0xb3, 0xa5, 0xef, 0xbb, 0xfb, 0xff, 0xc3, 0xd4, 0x93, 0x66, 0xe3, 0x9e, 0x4a, 0xf3, 0x32,
	0x63, 0x72, 0xeb, 0x42, 0x2f, 0xf3, 0xb9, 0x2d, 0x38, 0x77, 0xb4, 0x74, 0xc4, 0x5c, 0x18, 0x9d,
	0x59, 0x67, 0xbc, 0x11, 0xa2, 0x23, 0xb3, 0x96, 0x3c, 0x3d, 0xdf, 0x65, 0x17, 0xda, 0x56, 0xbe,
	0x11, 0x77, 0x43, 0x2b, 0xf3, 0x48, 0x65, 0x03, 0x49, 0x89, 0xa8, 0x7e, 0x36, 0x8a, 0x63, 0x1c,
	0xae, 0xe7, 0x65, 0x45, 0x31, 0x8c, 0x21, 0x1d, 0xa8, 0xe6, 0x23, 0xef, 0xf1, 0xb0, 0x63, 0x14,
	0x71, 0x55, 0x7a, 0x71, 0x85, 0x51, 0x97, 0x94, 0x63, 0x18, 0xef, 0xa5, 0xd1, 0x24, 0xc9, 0xfe,
	0x66, 0xcd, 0x7a, 0x6a, 0x5f, 0x91, 0xaf, 0x80, 0x47, 0xfd, 0xb1, 0xcf, 0x15, 0xb1, 0x17, 0x53,
	0xc4, 0x10, 0x6f, 0xc6, 0x96, 0x16, 0x21, 0x46, 0x34, 0x39, 0xdb, 0x36, 0xf6, 0x76, 0x43, 0xdd,
	0x59, 0x5a, 0xa8, 0xfd, 0xd5, 0xf7, 0x53, 0xe4, 0x38, 0x0c, 0x17, 0x88, 0x07, 0x41, 0x3c, 0xd9,
	0x26, 0xde, 0x6c, 0x00, 0xd5, 0x70, 0x52, 0xa1, 0xf8, 0x55, 0xcd, 0x1a, 0xcd, 0x24, 0xa6, 0x38,
	0x72, 0xa1, 0x66, 0x1b, 0xe0, 0xe2, 0x9f, 0x5e, 0x81, 0x55, 0xad, 0x73, 0x7d, 0xf0, 0x56, 0x27,
	0xf0, 0x5e, 0x27, 0xf0, 0x51, 0x27, 0xf0, 0x09, 0xf0, 0x30, 0x0a, 0xa7, 0xbe, 0xfc, 0x0a, 0x00,
	0x00, 0xff, 0xff, 0x83, 0x8c, 0xc8, 0x86, 0xf4, 0x01, 0x00, 0x00,
}
